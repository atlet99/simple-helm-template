{{- if .Values.image.repository }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "default-app.fullname" . }}
  namespace: {{ include "default-app.namespace" . }}
  labels:
    {{- include "default-app.labels" . | nindent 4 }}
  annotations:
    {{- include "default-app.annotations" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "default-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "default-app.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: "{{ include "default-app.serviceAccountName" . }}"
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "default-app.fullname" . | default "app" }}
          image: "{{ .Values.image.repository | default "nginx" }}:{{ .Values.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            {{- range $index, $port := .Values.service.ports }}
            - name: {{ $port.name | default (printf "port-%d" $index) }}
              containerPort: {{ $port.targetPort | default $port.port }}
              protocol: {{ $port.protocol | default "TCP" }}
            {{- else }}
            - name: default-port
              containerPort: 80
              protocol: TCP
            {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if or .Values.configs .Values.secrets .Values.externalSecrets .Values.existingSecrets .Values.existingConfigs }}
          envFrom:
            {{- range .Values.configs }}
            {{- if and .enabled .useEnvFrom (not .mountPath) }}
            - configMapRef:
                name: "{{ .name }}"
            {{- end }}
            {{- end }}
            {{- range .Values.secrets }}
            {{- if and .enabled .envFrom (not .mountPath) }}
            - secretRef:
                name: "{{ .name }}"
            {{- end }}
            {{- end }}
            {{- range .Values.externalSecrets }}
            {{- if and  .enabled .envFrom (not .mountPath) }}
            - secretRef:
                name: "{{ .name }}"
            {{- end }}
            {{- end }}
            {{- range .Values.existingSecrets }}
            {{- if and .enabled .envFrom (not .mountPath) }}
            - secretRef:
                name: "{{ .name }}"
            {{- end }}
            {{- end }}
            {{- range .Values.existingConfigs }}
            {{- if and .enabled .useEnvFrom (not .mountPath) }}
            - configMapRef:
                name: "{{ .name }}"
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if or .Values.configs .Values.secrets .Values.externalSecrets .Values.existingConfigs .Values.existingSecrets }}
          env:
            {{- range .Values.externalSecrets }}
            {{- if and .enabled (not .mountPath) }}
            {{- $externalSecretName := .name }}
            {{- range .envVars }}
            - name: "{{ .envName }}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $externalSecretName }}"
                  key: "{{ .key }}"
                  optional: {{ .optional | default true }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.secrets }}
            {{- if and .enabled (not .mountPath) }}
            {{- $secretName := .name }}
            {{- range .envVars }}
            - name: "{{ .envName }}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $secretName }}"
                  key: "{{ .key }}"
                  optional: {{ .optional | default true }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.configs }}
            {{- if and .enabled (not .mountPath) }}
            {{- $configName := .name }}
            {{- range .envVars }}
            - name: "{{ .envName }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{ $configName }}"
                  key: "{{ .key }}"
                  optional: {{ .optional | default true }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.configs }}
            {{- if and .enabled .mountPath .subPathExpr .subPathExprFieldPath }}
            {{- $fieldPath := .subPathExprFieldPath }}
            - name: "{{ .subPathExpr }}"
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "{{ $fieldPath }}"
            {{- end }}
            {{- end }}
            {{- range .Values.secrets }}
            {{- if and .enabled .mountPath .subPathExpr .subPathExprFieldPath }}
            {{- $fieldPath := .subPathExprFieldPath }}
            - name: "{{ .subPathExpr }}"
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "{{ $fieldPath }}"
            {{- end }}
            {{- end }}
            {{- range .Values.externalSecrets }}
            {{- if and .enabled .mountPath .subPathExpr .subPathExprFieldPath }}
            {{- $fieldPath := .subPathExprFieldPath }}
            - name: "{{ .subPathExpr }}"
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "{{ $fieldPath }}"
            {{- end }}
            {{- end }}
            {{- range .Values.existingSecrets }}
            {{- if .enabled (not .mountPath) }}
            {{- $secretName := .name }}
            {{- range .envVars }}
            - name: "{{ .envName }}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $secretName }}"
                  key: "{{ .key }}"
                  optional: {{ .optional | default true }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.existingConfigs }}
            {{- if .enabled (not .mountPath) }}
            {{- $configName := .name }}
            {{- range .envVars }}
            - name: "{{ .envName }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{ $configName }}"
                  key: "{{ .key }}"
                  optional: {{ .optional | default true }}
            {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if or .Values.configs .Values.secrets .Values.externalSecrets .Values.persistent.pvc.enabled }}
          volumeMounts:
            {{- range .Values.configs }}
            {{- if and .enabled .mountPath }}
            - name: "{{ .name }}-volume"
              mountPath: "{{ .mountPath }}"
              {{- if .subPath }}
              subPath: "{{ .subPath }}"
              {{- else if .subPathExpr }}
              subPathExpr: "{{ .subPathExpr }}"
              {{- end }}
              readOnly: {{ .readOnly | default false | toString | lower }}
            {{- end }}
            {{- end }}
            {{- range .Values.secrets }}
            {{- if and .enabled .mountPath }}
            - name: "{{ .name }}-secret-volume"
              mountPath: "{{ .mountPath }}"
              {{- if .subPath }}
              subPath: "{{ .subPath }}"
              {{- else if .subPathExpr }}
              subPathExpr: "{{ .subPathExpr }}"
              {{- end }}
              readOnly: {{ .readOnly | default true | toString | lower }}
            {{- end }}
            {{- end }}
            {{- range .Values.externalSecrets }}
            {{- if and .enabled .mountPath }}
            - name: "{{ .name }}-ext-sec-vl"
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: "{{ .subPath }}"
              {{- else if .subPathExpr }}
              subPathExpr: "{{ .subPathExpr }}"
              {{- end }}
              readOnly: {{ .readOnly | default true | toString | lower }}
            {{- end }}
            {{- end }}
            {{- if .Values.persistent.pvc.enabled }}
            {{- range .Values.persistent.pvc.claims }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default false | toString | lower }}
            {{- end }}
            {{- end }}
          {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- range .Values.initContainers }}
        - name: {{ .name }}
          image: "{{ .image }}"
          imagePullPolicy: {{ .imagePullPolicy | default "IfNotPresent" }}
          {{- with .command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if or .Values.configs .Values.secrets .Values.externalSecrets .Values.persistent.enabled }}
      volumes:
        {{- range .Values.configs }}
        {{- if and .enabled .mountPath }}
        - name: "{{ .name }}-volume"
          configMap:
            name: "{{ .name }}"
        {{- end }}
        {{- end }}
        {{- range .Values.secrets }}
        {{- if and .enabled .mountPath }}
        - name: "{{ .name }}-secret-volume"
          secret:
            secretName: "{{ .name }}"
        {{- end }}
        {{- end }}
        {{- range .Values.externalSecrets }}
        {{- if and .enabled .mountPath }}
        - name: "{{ .name }}-ext-sec-vl"
          secret:
            secretName: "{{ .name }}"
        {{- end }}
        {{- end }}
        {{- if .Values.persistent.pvc.enabled }}
        {{- range .Values.persistent.pvc.claims }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .name }}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
{{- end }}