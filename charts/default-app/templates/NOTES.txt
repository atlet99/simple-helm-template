{{- if or .Values.ingress.enabled (and .Values.service .Values.service.ports (gt (len .Values.service.ports) 0)) }}
1. Access Your Application

{{- if .Values.ingress.enabled }}
Your application is exposed via Ingress. You can access it using the following URL(s):
{{- range $host := .Values.ingress.hosts }}
  {{- range $path := $host.paths }}
    - http{{ if gt (len $.Values.ingress.tls) 0 }}s{{ end }}://{{ $host.host }}{{ $path.path }}
  {{- end }}
{{- end }}

{{- else if and (contains "NodePort" .Values.service.type) (gt (len .Values.service.ports) 0) }}
Your application is exposed via a NodePort service.
To retrieve the URL, run:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "default-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "http://$NODE_IP:$NODE_PORT"

{{- else if and (contains "LoadBalancer" .Values.service.type) (gt (len .Values.service.ports) 0) }}
Your application is exposed via a LoadBalancer service.
NOTE: It may take a few minutes for the external IP to be assigned.
You can monitor its status by running:
  kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "default-app.fullname" . }}
Once the external IP is available, run:
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "default-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "http://$SERVICE_IP:{{ (index .Values.service.ports 0).port }}"

{{- else if and (contains "ClusterIP" .Values.service.type) (gt (len .Values.service.ports) 0) }}
Your application is running as a ClusterIP service.
To access it, you can use port-forwarding. Run:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "default-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Forwarding port 8080 to your pod..."
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
Then open your browser and navigate to: http://127.0.0.1:8080
{{- end }}
{{- end }}