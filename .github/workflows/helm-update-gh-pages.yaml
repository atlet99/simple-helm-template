name: Update Helm Repo Index

on:
  workflow_run:
    workflows: ["Release Helm Chart"]
    types:
      - completed

permissions:
  contents: write
  actions: read

jobs:
  update-index:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Fetch history
        run: git fetch --prune --unshallow

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Get Workflow ID
        id: get_workflow_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const workflow = workflows.data.workflows.find(wf => wf.path.endsWith("helm-publish.yaml"));
            if (!workflow) {
              throw new Error("Workflow 'helm-publish.yaml' not found.");
            }

            core.setOutput("WORKFLOW_ID", workflow.id);

      - name: Get latest successful workflow run ID
        id: get_run_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "${{ steps.get_workflow_id.outputs.WORKFLOW_ID }}",
              branch: "main",
              status: "completed",
              per_page: 5
            });

            const successfulRun = runs.data.workflow_runs.find(run => run.conclusion === "success");
            if (!successfulRun) {
              throw new Error("No successful workflow runs found.");
            }

            core.setOutput("RUN_ID", successfulRun.id);

      - name: List available artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ steps.get_run_id.outputs.RUN_ID }}
            });
      
            console.log("Available artifacts:");
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name}`);
            }

      - name: Get Artifact ID
        id: get_artifact_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ steps.get_run_id.outputs.RUN_ID }}
            });

            const artifact = artifacts.data.artifacts.find(a => a.name === "helm-packages");
            if (!artifact) {
              throw new Error("Artifact 'helm-packages' not found.");
            }

            core.setOutput("ARTIFACT_ID", artifact.id);

      - name: Manually Download Helm Packages
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o helm-packages.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.get_artifact_id.outputs.ARTIFACT_ID }}/zip"
          
          mkdir -p .cr-release-packages
          unzip helm-packages.zip -d .cr-release-packages

      - name: Display Helm Packages
        run: ls -R .cr-release-packages/

      - name: Install Chart Releaser
        run: |
          ARCH=$(uname -m)
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          CR_VERSION=$(curl -s https://api.github.com/repos/helm/chart-releaser/releases/latest | jq -r '.tag_name' | sed 's/^v//')

          if [[ "$ARCH" == "x86_64" ]]; then ARCH="amd64"; fi
          if [[ "$ARCH" == "aarch64" ]]; then ARCH="arm64"; fi

          CR_BINARY="chart-releaser_${CR_VERSION}_${OS}_${ARCH}.tar.gz"
          DOWNLOAD_URL="https://github.com/helm/chart-releaser/releases/download/v${CR_VERSION}/${CR_BINARY}"

          echo "Downloading Chart Releaser from $DOWNLOAD_URL"
          curl -fsSL -o cr.tar.gz -L "$DOWNLOAD_URL" || { echo "Failed to download"; exit 1; }

          echo "Extracting Chart Releaser..."
          tar -xzf cr.tar.gz || { echo "Failed to extract"; exit 1; }

          echo "Moving binary to /usr/local/bin"
          chmod +x cr
          sudo mv cr /usr/local/bin/cr

          echo "Cleaning up..."
          rm -rf cr.tar.gz LICENSE README.md

          echo "Chart Releaser installed successfully:"
          cr version

      - name: Latest Check Helm Packages
        run: ls -R .cr-release-packages/

      - name: Run Chart Releaser Index
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          cr index --owner "${{ github.repository_owner }}" \
            --git-repo "$(basename ${{ github.repository }})" \
            --packages-with-index \
            --index-path . \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --push
